(define (sieve m)
  (if (< m 2)
      (lambda (n) #t)
      (let ((f (sieve (- m 1))))
	(if (f m)
	    (lambda (n) (and (f n) (< 0 (modulo n m))))
	    f))))
(define (sieve-iter m i f)
  (cond ((< i 2) (sieve-iter m 2 f))
	((< m i) f)
	((f i)
	 (sieve-iter m (+ i 1)
		     (lambda (n)
		       (and (f n) (< 0 (modulo n i))))))
	(else (sieve-iter m (+ i 1) f))))
(define (sieve2 m)
  (sieve-iter m 2 (lambda (n) #t)))

(define (prime? n) ((sieve2 (floor (sqrt n))) n))