;; (f 0) = 0, (f 1) = 1のフィボナッチ数列の第n項を返す関数
(define (f n)
  (define (g n)
    (if (< n 1) (cons 0 1)
	(let ((a (g (- n 1))))
	  (cons (cdr a) (+ (car a) (cdr a))))))
  (car (g n)))

;; (g n)は、n=0で(0 . 1)のペアを返し、再帰的にn=kで、((n=k-1のときのペアの後ろの要素) . (n=k-1のときのペアの要素の和))を返す。つまり、(g n)はフィボナッチ数列の第n項と第n+1項のペアを返す。(g n) = ((f n) . (f (+ n 1)))である。各nでは(g (- n 1))を１回呼び出すだけなので、計算量はO(n)である。但し末尾再帰にはなっていない。
(define (g n)
  (if (< n 1) (cons 0 1)
      (let ((a (g (- n 1))))
	(cons (cdr a) (+ (car a) (cdr a))))))
